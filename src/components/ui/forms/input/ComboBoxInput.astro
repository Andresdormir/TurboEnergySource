---
export type ComboBoxOption = {
    textValue: string;
    idValue: string;
};

interface Props {
    options: ComboBoxOption[];
    selectedValue?: string;
}

const { options = [], selectedValue = "" } = Astro.props;
---

<div class="relative" data-hs-combo-box="">
    <div class="relative">
        <input
            class="focus:border-blue-500 focus:ring-blue-500 block w-full rounded-lg border-gray-200 py-3 pe-9 ps-4 text-sm disabled:pointer-events-none disabled:opacity-50 dark:border-neutral-700 dark:bg-neutral-900 dark:text-neutral-400 dark:placeholder-neutral-500 dark:focus:ring-neutral-600"
            type="text"
            role="combobox"
            aria-expanded="false"
            value={selectedValue}
            data-hs-combo-box-input=""
        />
        <div
            class="absolute end-3 top-1/2 -translate-y-1/2"
            aria-expanded="false"
            data-hs-combo-box-toggle=""
        >
            <svg
                class="size-3.5 shrink-0 text-gray-500 dark:text-neutral-500"
                xmlns="http://www.w3.org/2000/svg"
                width="24"
                height="24"
                viewBox="0 0 24 24"
                fill="none"
                stroke="currentColor"
                stroke-width="2"
                stroke-linecap="round"
                stroke-linejoin="round"
            >
                <path d="m7 15 5 5 5-5"></path>
                <path d="m7 9 5-5 5 5"></path>
            </svg>
        </div>
    </div>
    <div
        class="absolute z-50 max-h-72 w-full overflow-hidden overflow-y-auto rounded-lg border border-gray-200 bg-white p-1 dark:border-neutral-700 dark:bg-neutral-900 [&::-webkit-scrollbar-thumb]:rounded-full [&::-webkit-scrollbar-thumb]:bg-gray-300 dark:[&::-webkit-scrollbar-thumb]:bg-neutral-500 [&::-webkit-scrollbar-track]:bg-gray-100 dark:[&::-webkit-scrollbar-track]:bg-neutral-700 [&::-webkit-scrollbar]:w-2"
        style="display: none;"
        data-hs-combo-box-output=""
    >
        {options.map((option : any) => (
            <div
                class="w-full cursor-pointer rounded-lg px-4 py-2 text-sm text-gray-800 hover:bg-gray-100 focus:bg-gray-100 focus:outline-none dark:bg-neutral-900 dark:text-neutral-200 dark:hover:bg-neutral-800 dark:focus:bg-neutral-800"
                tabindex="0"
                data-hs-combo-box-output-item=""
            >
                <div class="flex w-full items-center justify-between">
                    <span
                        data-hs-combo-box-search-text={option.textValue}
                        data-hs-combo-box-value={option.idValue}
                    >
                        {option.textValue}
                    </span>
                    <span class="hidden hs-combo-box-selected:block">
                        <svg
                            class="text-blue-600 dark:text-blue-500 size-3.5 shrink-0"
                            xmlns="http://www.w3.org/2000/svg"
                            width="24"
                            height="24"
                            viewBox="0 0 24 24"
                            fill="none"
                            stroke="currentColor"
                            stroke-width="2"
                            stroke-linecap="round"
                            stroke-linejoin="round"
                        >
                            <path d="M20 6 9 17l-5-5" />
                        </svg>
                    </span>
                </div>
            </div>
        ))}
    </div>
</div>


<script>
    document
        .querySelectorAll("[data-hs-combo-box-output-item]")
        .forEach(function (item) {
            item.addEventListener("click", function () {
                // Obtén el combobox más cercano al ítem seleccionado
                const comboBox = item.closest(
                    "[data-hs-combo-box]",
                ) as HTMLElement | null;

                if (comboBox) {
                    const comboBoxToggle = comboBox.querySelector(
                        "[data-hs-combo-box-toggle]",
                    ) as HTMLElement | null;
                    const outputBox = comboBox.querySelector(
                        "[data-hs-combo-box-output]",
                    ) as HTMLElement | null;
                    const input = comboBox.querySelector(
                        "[data-hs-combo-box-input]",
                    ) as HTMLInputElement | null;

                    // Verifica si los elementos existen antes de usarlos
                    if (outputBox && comboBoxToggle && input) {
                        // Colapsa el combobox
                        outputBox.style.display = "none";
                        comboBoxToggle.setAttribute("aria-expanded", "false");

                        // Actualiza el valor del input con el texto seleccionado
                        const searchText = item.querySelector(
                            "[data-hs-combo-box-search-text]",
                        ) as HTMLElement | null;
                        if (searchText) {
                            input.value = searchText.textContent || "";
                        }
                    }
                }
            });
        });

    // Funcionalidad para mostrar y ocultar el combobox al hacer clic en el input o en el botón
    document
        .querySelectorAll(
            "[data-hs-combo-box-toggle], [data-hs-combo-box-input]",
        )
        .forEach(function (toggleElement) {
            toggleElement.addEventListener("click", function () {
                const comboBox = toggleElement.closest(
                    "[data-hs-combo-box]",
                ) as HTMLElement | null;

                if (comboBox) {
                    const outputBox = comboBox.querySelector(
                        "[data-hs-combo-box-output]",
                    ) as HTMLElement | null;
                    const comboBoxToggle = comboBox.querySelector(
                        "[data-hs-combo-box-toggle]",
                    ) as HTMLElement | null;

                    // Verifica si el menú desplegable existe
                    if (outputBox && comboBoxToggle) {
                        const isExpanded =
                            comboBoxToggle.getAttribute("aria-expanded") ===
                            "true";

                        if (isExpanded) {
                            // Si está desplegado, lo cerramos
                            outputBox.style.display = "none";
                            comboBoxToggle.setAttribute(
                                "aria-expanded",
                                "false",
                            );
                        } else {
                            // Si está cerrado, lo desplegamos
                            outputBox.style.display = "block";
                            comboBoxToggle.setAttribute(
                                "aria-expanded",
                                "true",
                            );
                        }
                    }
                }
            });
        });
</script>
