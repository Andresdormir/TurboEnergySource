---
// Import the necessary dependencies.
import AuthBtn from "@components/ui/buttons/AuthBtn.astro";
import ContactIconBlock from "@components/ui/blocks/ContactIconBlock.astro";
import TextInput from "@components/ui/forms/input/TextInput.astro";
import EmailContactInput from "@components/ui/forms/input/EmailContactInput.astro";
import PhoneInput from "@components/ui/forms/input/PhoneInput.astro";
import TextAreaInput from "@components/ui/forms/input/TextAreaInput.astro";
import Icon from "@components/ui/icons/Icon.astro";

// Define the variables that will be used in this component
const reCaptchaPublicKey = import.meta.env.RE_CAPTCHA_PUBLIC_KEY;
const title: string = "Contactenos";
const subTitle: string =
  "Tiene preguntas o quiere discutir un proyecto? Comuníquese y creemos la solución perfecta con nuestras herramientas y servicios.";
const formTitle: string = "Rellene el siguiente formulario:";
const formSubTitle: string = "Lo contactaremos en 1-2 días hábiles.";

---

<!-- <script src="../../../assets/scripts/recaptcha-api.js"></script> -->
<script src="https://www.google.com/recaptcha/api.js" async defer></script>

<!-- Contact Us -->
<section class="mx-auto max-w-[85rem] px-4 py-10 sm:px-6 lg:px-8 lg:py-14">
  <div class="mx-auto max-w-2xl lg:max-w-5xl">
    <div class="text-center">
      <h1
        class="text-balance text-2xl font-bold tracking-tight text-neutral-800 dark:text-neutral-200 md:text-4xl md:leading-tight"
      >
        {title}
      </h1>
      <p class="mt-1 text-pretty text-neutral-600 dark:text-neutral-400">
        {subTitle}
      </p>
    </div>
    <!-- </div> -->

    <div class="mt-12 grid items-center gap-6 lg:grid-cols-2 lg:gap-16">
      <div class="flex flex-col rounded-xl p-4 sm:p-6 lg:p-8">
        <h2
          class="mb-8 text-xl font-bold text-neutral-700 dark:text-neutral-300"
        >
          {formTitle}
        </h2>
        <!-- Form for user input with various input fields.-->
        <!-- Each field utilizes a different input component for the specific type of input (text, email, phone, and textarea)-->
        <form id="contactForm" method="POST">
          <div class="grid gap-4">
            <div class="grid grid-cols-1 gap-4 sm:grid-cols-2">
              <TextInput
                id="firstName"
                label="Primer nombre"
                name="firstName"
              />
              <TextInput id="lastName" label="Segundo nombre" name="lastName" />
            </div>
            <EmailContactInput id="email" name="email" placeholder="Correo" />
            <PhoneInput id="phone" name="phone" label="+0 0000000" />
            <TextAreaInput
              id="hs-about-contacts"
              label="Detalles..."
              name="details"
            />
          </div>

          <div class="mt-4 grid">
            <div class="g-recaptcha" data-sitekey={reCaptchaPublicKey} data-action="submit_contact_form"></div>
          </div>

          <div class="mt-4 grid">
            <AuthBtn id="authBtn" title="Enviar" />
          </div>

          <div class="mt-3 text-center">
            <p class="text-sm text-neutral-600 dark:text-neutral-400">
              {formSubTitle}
            </p>
          </div>
        </form>
      </div>

      <!--ContactIconBlocks are used to display different methods of contacting, including visiting office, email, browsing knowledgebase, and FAQ.-->
      <div class="divide-y divide-neutral-300 dark:divide-neutral-700">
        <ContactIconBlock
          heading="Base de conocimientos"
          content="Explore todos los artículos de nuestra base de conocimientos."
          isLinkVisible={true}
          linkTitle="Guías de visita y tutoriales"
          linkURL="#"
          isArrowVisible={true}
          ><Icon name="question" />
        </ContactIconBlock>

        <ContactIconBlock
          heading="FAQ"
          content="Explore nuestras preguntas frecuentes para obtener respuestas rápidas y claras a consultas comunes."
          isLinkVisible={true}
          linkTitle="Visit FAQ"
          linkURL="#"
          isArrowVisible={true}
          ><Icon name="chatBubble" />
        </ContactIconBlock>

        <ContactIconBlock
          heading="Visite nuestras oficinas"
          content="UK ScrewFast"
          isAddressVisible={true}
          addressContent="72 Union Terrace, E10 4PE London"
          ><Icon name="mapPin" />
        </ContactIconBlock>

        <ContactIconBlock
          heading="Contactenos via email"
          content="Prefieres la palabra escrita? Envíanos un correo electrónico a"
          isLinkVisible={true}
          linkTitle="support@screwfast.uk"
          linkURL="#"
          ><Icon name="envelopeOpen" />
        </ContactIconBlock>
      </div>
    </div>
  </div>
</section>

<script>
  import { sendContactForm } from "@/API/pushData.ts";
  import { errorToast, successToast } from "@utils/notify.ts";
  import { isFormDataEmpty, checkContactFormData} from "@utils/functions.ts";

  declare const grecaptcha: any;
  let form = document.getElementById("contactForm") as HTMLFormElement;
  let authBtn = document.getElementById("authBtn");

  authBtn?.addEventListener("click", async (e) => {
    e.preventDefault();

    if (form) {
      const formData = new FormData(form);
      const email = formData.get('email') as string;
      const phone = formData.get('phone') as string;

      const captchaResponse = grecaptcha.getResponse();
      if (!captchaResponse) {
        return errorToast("Error", "Por favor, complete el reCAPTCHA.", undefined, true, false);
      }

      if (!isFormDataEmpty(formData) && !checkContactFormData(email, phone)) {

        const data = {
          firstName : formData.get('firstName'),
          lastName  : formData.get('lastName'),
          email     : email,
          phone     : phone,
          details   : formData.get('details'),
          captchaResponse: captchaResponse
        }
        const res = await sendContactForm(data);

        try {
          if (res.success) {
            return successToast("¡Solicitud enviada!", res.success);
          } else if (res.error) {
            return errorToast("¡Ha acurrido un error inesperado!", res.error);
          }
        } catch (e) {
          const errorMessage = (e as Error).message;
          return errorToast("¡Ha acurrido un error inesperado!", errorMessage);
        }
      }else{
        return errorToast("Corrigue lo siguiente:", 'Formato de correo/telefono invalidos o campos requeridos faltanes.', undefined, true, false);
      }
    } else {
      return errorToast("¡Error!", "Ha acurrido un error inesperado.");
    }
  });
</script>
